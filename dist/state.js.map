{"version":3,"file":"state.js","sourceRoot":"","sources":["../src/state.ts"],"names":[],"mappings":";;AAAA,6CAAuD;AACvD,uCAA8B;AAC9B,uCAAoC;AACpC,+BAA4B;AAE5B;IAYI,MAAM,CAAC,IAAI,CAAC,WAAmB,EAAE,cAAsB;QACnD,IAAI,CAAC,OAAO,GAAG,IAAI,iBAAO,EAAE,CAAC;QAC7B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC/B,IAAI,CAAC,KAAK,GAAG,IAAI,uBAAU,EAAE,CAAC;QAC9B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAC1D,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QACnD,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,OAAO,GAAG,IAAI,SAAG,CAAC,cAAc,CAAC,CAAC;QACvC,IAAI,CAAC,oBAAoB,EAAE,CAAC;IAChC,CAAC;IAED,MAAM,CAAC,oBAAoB;QACvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YACxB,MAAM,IAAI,GAAG,mBAAmB,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;YAC9C,IAAI,IAAI,IAAI,IAAI,CAAC,cAAc,EAAE;gBAC7B,SAAS;aACZ;YACD,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;SACrC;IACL,CAAC;IAED,MAAM,CAAC,aAAa;QAChB,OAAO,KAAK,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;IACpC,CAAC;IAED,MAAM,CAAC,WAAW;QACd,KAAK,CAAC,OAAO,CAAC,gBAAgB,CAAC,GAAG,EAAE,WAAW,EAAE,EAAE,IAAI,EAAE,KAAK,CAAC,cAAc,EAAE,EAAE,EAAE,CAAC,CAAC;IACzF,CAAC;IAED,MAAM,CAAC,OAAO,CAAC,IAAY;QACvB,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC;IAED,MAAM,CAAC,eAAe,CAAC,EAAe;QAClC,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,EAAE,EAAE,kBAAkB,EAAE;YAClD,IAAI,EAAE,EAAE,CAAC,IAAI;YACb,EAAE,EAAE,EAAE,CAAC,EAAE;YACT,MAAM,EAAE,EAAE,CAAC,MAAM;YACjB,OAAO,EAAE,EAAE,CAAC,OAAO;YACnB,SAAS,EAAE,EAAE,CAAC,SAAS;YACvB,SAAS,EAAE,EAAE,CAAC,SAAS;SAC1B,EAAE,EAAE,CAAC,CAAC;IACX,CAAC;;AA/Cc,YAAM,GAAG,IAAI,aAAE,CAAC,WAAW,CAAC,CAAC;AAPhD,sBAuDC","sourcesContent":["import { BlockChain, Transaction } from \"./blockchain\";\r\nimport { ec } from \"elliptic\";\r\nimport { Profile } from \"./profile\";\r\nimport { P2P } from \"./p2p\";\r\n\r\nexport class State {\r\n\r\n    public static chain: BlockChain;\r\n    public static wallet: string;\r\n    public static profile: Profile;\r\n\r\n    private static network: P2P;\r\n    private static keyGen = new ec(\"secp256k1\");\r\n    static myKey: ec.KeyPair;\r\n    static myWalletAddress: string;\r\n    static currentWebAddr: string;\r\n\r\n    static init(profileName: string, currentWebAddr: string) {\r\n        this.profile = new Profile();\r\n        this.profile.load(profileName);\r\n        this.chain = new BlockChain();\r\n        this.myKey = this.keyGen.keyFromPrivate(this.profile.key);\r\n        this.myWalletAddress = this.myKey.getPublic(\"hex\");\r\n        this.currentWebAddr = currentWebAddr;\r\n        this.network = new P2P(currentWebAddr);\r\n        this.loadStaticNeighbours();\r\n    }\r\n\r\n    static loadStaticNeighbours() {\r\n        for (let i = 0; i < 1; i++) {\r\n            const addr = \"http://localhost:\" + (3000 + i);\r\n            if (addr == this.currentWebAddr) {\r\n                continue;\r\n            }\r\n            this.network.addNode(addr, false);\r\n        }\r\n    }\r\n\r\n    static getNeighbours(): any {\r\n        return State.network.getNodes();\r\n    }\r\n\r\n    static joinNetwork() {\r\n        State.network.postToNeighbours(100, \"/node/new\", { addr: State.currentWebAddr }, []);\r\n    }\r\n\r\n    static addNode(addr: string): any {\r\n        this.network.addNode(addr);\r\n    }\r\n\r\n    static sendTransaction(tx: Transaction): void {\r\n        this.network.postToNeighbours(20, \"/transaction/add\", {\r\n            from: tx.from,\r\n            to: tx.to,\r\n            amount: tx.amount,\r\n            comment: tx.comment,\r\n            signature: tx.signature,\r\n            timestamp: tx.timestamp\r\n        }, []);\r\n    }\r\n}"]}