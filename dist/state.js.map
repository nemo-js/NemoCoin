{"version":3,"file":"state.js","sourceRoot":"","sources":["../src/state.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,6CAAuD;AACvD,uCAA8B;AAC9B,sDAA8B;AAE9B,oCAAoC;AACpC,iCAAiC;AACjC;IAUI,MAAM,CAAC,IAAI,CAAC,UAAkB,EAAE,cAAsB;QAClD,IAAI,CAAC,KAAK,GAAG,IAAI,uBAAU,EAAE,CAAC;QAC9B,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QACpB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;QACpD,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QACnD,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,oBAAoB,EAAE,CAAC;IAChC,CAAC;IAED,MAAM,CAAC,oBAAoB;QACvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YACxB,MAAM,IAAI,GAAG,mBAAmB,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;YAC9C,IAAI,IAAI,IAAI,IAAI,CAAC,cAAc,EAAE;gBAC7B,SAAS;aACZ;YACD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;SAC5C;IACL,CAAC;IAED,MAAM,CAAC,eAAe,CAAC,GAAgB;QACnC,IAAI,CAAC,gBAAgB,CAAC,EAAE,EAAE,kBAAkB,EAAE;YAC1C,IAAI,EAAE,GAAG,CAAC,IAAI;YACd,EAAE,EAAE,GAAG,CAAC,EAAE;YACV,MAAM,EAAE,GAAG,CAAC,MAAM;YAClB,OAAO,EAAE,GAAG,CAAC,OAAO;YACpB,SAAS,EAAE,GAAG,CAAC,SAAS;SAC3B,CAAC,CAAC;IACP,CAAC;IAEO,MAAM,CAAC,gBAAgB,CAAC,KAAa,EAAE,IAAY,EAAE,IAAS;QAClE,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,IAAI,KAAK,CAAC,CAAC;QAE9D,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE;YAC5B,IAAI,OAAO,CAAC,MAAM,IAAI,CAAC,EAAE;gBACrB,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;gBAClC,MAAM;aACT;YAED,MAAM,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;YACxB,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;iBACjC,KAAK,CAAC,GAAG,EAAE;gBACR,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;YACvB,CAAC,CAAC,CAAC;SACV;IACL,CAAC;IAEO,MAAM,CAAO,eAAe,CAAC,CAAY,EAAE,IAAY,EAAE,IAAS;;YACtE,OAAO,IAAI,OAAO,CAAC,UAAS,OAAO,EAAE,MAAM;gBACvC,MAAM,IAAI,GAAG,CAAC,CAAC,OAAO,GAAG,IAAI,CAAC;gBAC9B,OAAO,CAAC,GAAG,CAAC,eAAe,EAAG,CAAC,CAAC,OAAO,CAAC,CAAC;gBACzC,iBAAO,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,EAC7B,CAAC,KAAU,EAAE,QAA0B,EAAE,IAAS,EAAE,EAAE;oBAClD,IAAI,CAAC,KAAK,IAAI,QAAQ,CAAC,UAAU,IAAI,GAAG,EAAE;wBACtC,OAAO,CAAC,GAAG,CAAC,eAAe,EAAG,CAAC,CAAC,OAAO,CAAC,CAAC;wBACzC,OAAO,EAAE,CAAC;qBACb;yBAAM;wBACH,OAAO,CAAC,GAAG,CAAC,cAAc,EAAG,CAAC,CAAC,OAAO,CAAC,CAAC;wBACxC,MAAM,EAAE,CAAC;qBACZ;gBACT,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;QACP,CAAC;KAAA;;AAlEc,YAAM,GAAG,IAAI,aAAE,CAAC,WAAW,CAAC,CAAC;AALhD,sBAwEC;AAED;IAII,YAAmB,OAAe;QAAf,YAAO,GAAP,OAAO,CAAQ;QAF3B,WAAM,GAAG,KAAK,CAAC;IAItB,CAAC;CACJ","sourcesContent":["import { BlockChain, Transaction } from \"./blockchain\";\r\nimport { ec } from \"elliptic\";\r\nimport request from \"request\";\r\n\r\n//const EC = require(\"elliptic\").ec;\r\n//const ec = new EC(\"secp256k1\");\r\nexport class State {\r\n    public static chain: BlockChain;\r\n    public static neighbors: Neighbour[];\r\n    public static wallet: string;\r\n\r\n    private static keyGen = new ec(\"secp256k1\");\r\n    static myKey: ec.KeyPair;\r\n    static myWalletAddress: string;\r\n    static currentWebAddr: string;\r\n\r\n    static init(privateKey: string, currentWebAddr: string) {\r\n        this.chain = new BlockChain();\r\n        this.neighbors = [];\r\n        this.myKey = this.keyGen.keyFromPrivate(privateKey);\r\n        this.myWalletAddress = this.myKey.getPublic(\"hex\");\r\n        this.currentWebAddr = currentWebAddr;\r\n        this.loadStaticNeighbours();\r\n    }\r\n\r\n    static loadStaticNeighbours() {\r\n        for (let i = 0; i < 4; i++) {\r\n            const addr = \"http://localhost:\" + (3000 + i);\r\n            if (addr == this.currentWebAddr) {\r\n                continue;\r\n            }\r\n            this.neighbors.push(new Neighbour(addr));\r\n        }\r\n    }\r\n\r\n    static sendTransaction(tx1: Transaction): void {\r\n        this.postToNeighbours(20, \"/transaction/add\", {\r\n            from: tx1.from,\r\n            to: tx1.to,\r\n            amount: tx1.amount,\r\n            comment: tx1.comment,\r\n            signature: tx1.signature\r\n        });\r\n    }\r\n\r\n    private static postToNeighbours(count: number, path: string, data: any) {\r\n        const upNodes = this.neighbors.filter(n => n.isDown == false);\r\n\r\n        for (let i = 0; i < count; i++) {\r\n            if (upNodes.length <= i) {\r\n                console.log(\"no more neighbours\");\r\n                break;\r\n            }\r\n            \r\n            const node = upNodes[i];\r\n            this.postToNeighbour(node, path, data)\r\n                .catch(() => {\r\n                    node.isDown = true;\r\n                });\r\n        }\r\n    }\r\n\r\n    private static async postToNeighbour(n: Neighbour, path: string, data: any) {\r\n        return new Promise(function(resolve, reject){\r\n            const addr = n.address + path;\r\n            console.log(\"sending to...\",  n.address);\r\n            request.post(addr, { json: data }, \r\n                (error: any, response: request.Response, body: any) => {\r\n                    if (!error && response.statusCode == 200) {\r\n                        console.log(\"success to...\",  n.address);\r\n                        resolve();\r\n                    } else {\r\n                        console.log(\"falied to...\",  n.address);\r\n                        reject();\r\n                    }\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nclass Neighbour {\r\n\r\n    public isDown = false;\r\n\r\n    constructor(public address: string) {\r\n\r\n    }\r\n}"]}