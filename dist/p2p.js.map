{"version":3,"file":"p2p.js","sourceRoot":"","sources":["../src/p2p.ts"],"names":[],"mappings":"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","sourcesContent":["import request from \"request\";\r\n\r\n// todo: make p2p network more clever (on broadcast skip already informed, dont remove nodes on first failure)\r\n\r\nexport class P2P {\r\n\r\n    private nodes: Neighbour[] = [];\r\n\r\n    constructor(public myAddr: string) {\r\n        \r\n    }\r\n\r\n    addNode(addr: string, informOthers: boolean = true): any {\r\n        this.nodes = this.nodes.filter(n => n.isDown == false);\r\n        \r\n        if (addr == this.myAddr) {\r\n            return;\r\n        }\r\n\r\n        if (this.nodes.length > 25) {\r\n            return;\r\n        }\r\n        \r\n        if (this.nodes.find(n => n.address == addr)) {\r\n            return;\r\n        }\r\n\r\n        console.log(\"Adding new node!\", addr);\r\n        this.nodes.push(new Neighbour(addr));\r\n\r\n        if (informOthers === true) {\r\n            this.postToNeighbours(100, \"/node/new\", { addr: addr }, []);\r\n        }\r\n    }\r\n\r\n    getNodes(): string[] {\r\n        return this.nodes.map(n => n.address);\r\n    }\r\n\r\n    public postToNeighbours(count: number, path: string, data: any, exclude: string[]) {\r\n        const upNodes = this.nodes.filter(n => n.isDown == false);\r\n\r\n        for (let i = 0; i < count; i++) {\r\n            if (upNodes.length <= i) {\r\n                break;\r\n            }\r\n\r\n            const node = upNodes[i];\r\n            if (this.myAddr == node.address) {\r\n                continue;\r\n            }\r\n\r\n            if (exclude != null && exclude.indexOf(node.address) > -1) {\r\n                continue;\r\n            }\r\n\r\n            this.postToNeighbour(node, path, data)\r\n                .catch(() => {\r\n                    node.isDown = true;\r\n                });\r\n        }\r\n    }\r\n\r\n    private async postToNeighbour(n: Neighbour, path: string, data: any) {\r\n        return new Promise(function(resolve, reject){\r\n            const addr = n.address + path;\r\n\r\n            request.post(addr, { json: data }, \r\n                (error: any, response: request.Response, body: any) => {\r\n                    if (!error && response.statusCode == 200) {\r\n                        console.log(\"success to...\",  n.address);\r\n                        resolve();\r\n                    } else {\r\n                        console.log(\"falied to...\",  n.address);\r\n                        reject();\r\n                    }\r\n            });\r\n        });\r\n    }\r\n\r\n}\r\n\r\nclass Neighbour {\r\n\r\n    public isDown = false;\r\n\r\n    constructor(public address: string) {\r\n\r\n    }\r\n}"]}