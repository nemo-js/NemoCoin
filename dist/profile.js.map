{"version":3,"file":"profile.js","sourceRoot":"","sources":["../src/profile.ts"],"names":[],"mappings":";;AAAA,MAAM,EAAE,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC;AAClC,MAAM,EAAE,GAAG,IAAI,EAAE,CAAC,WAAW,CAAC,CAAC;AAC/B,2BAAwE;AAExE;IAMI;QAJA,SAAI,GAAW,EAAE,CAAC;QAClB,QAAG,GAAW,EAAE,CAAC;QAIb,IAAI,CAAC,eAAU,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;YAC1B,cAAS,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;SAC1B;IACL,CAAC;IAED,IAAI,CAAC,IAAY;QACb,MAAM,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QACvC,IAAI,CAAC,eAAU,CAAC,IAAI,CAAC,EAAE;YACnB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YAClB,OAAO;SACV;QAED,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,iBAAY,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;QACpD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACtB,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;IACxB,CAAC;IAED,MAAM,CAAC,IAAY;QACf,MAAM,GAAG,GAAG,EAAE,CAAC,UAAU,EAAE,CAAC;QAC5B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QACjC,IAAI,CAAC,IAAI,EAAE,CAAC;IAChB,CAAC;IAED,IAAI;QACA,IAAI,CAAC,eAAU,CAAC,OAAO,CAAC,GAAG,GAAG,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE;YAC7C,cAAS,CAAC,OAAO,CAAC,GAAG,GAAG,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC;SAC7C;QAED,kBAAa,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC;YACzD,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,GAAG,EAAE,IAAI,CAAC,GAAG;SAChB,CAAC,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC;IAC9B,CAAC;IAEO,cAAc,CAAC,IAAY;QAC/B,OAAO,OAAO,CAAC,GAAG,GAAG,IAAI,GAAG,IAAI,GAAG,WAAW,CAAC;IACnD,CAAC;;AAxCc,WAAG,GAAG,SAAS,GAAG,YAAY,CAAC;AAJlD,0BA6CC","sourcesContent":["const EC = require(\"elliptic\").ec;\r\nconst ec = new EC(\"secp256k1\");\r\nimport { existsSync, mkdirSync, writeFileSync, readFileSync } from \"fs\";\r\n\r\nexport class Profile {\r\n\r\n    name: string = \"\";\r\n    key: string = \"\";\r\n    private static dir = __dirname + \"\\\\.profile\";\r\n\r\n    constructor() {\r\n        if (!existsSync(Profile.dir)) {\r\n            mkdirSync(Profile.dir);\r\n        }\r\n    }\r\n    \r\n    load(name: string) {\r\n        const path = this.getProfilePath(name);\r\n        if (!existsSync(path)) {\r\n            this.create(name);\r\n            return;\r\n        }\r\n\r\n        const data = JSON.parse(readFileSync(path, \"utf8\"));\r\n        this.name = data.name;\r\n        this.key = data.key;\r\n    }\r\n\r\n    create(name: string) {\r\n        const key = ec.genKeyPair();\r\n        this.name = name;\r\n        this.key = key.getPrivate(\"hex\");\r\n        this.save();\r\n    }\r\n\r\n    save() {\r\n        if (!existsSync(Profile.dir + \"\\\\\" + this.name)) {\r\n            mkdirSync(Profile.dir + \"\\\\\" + this.name);\r\n        }\r\n\r\n        writeFileSync(this.getProfilePath(this.name), JSON.stringify({\r\n            name: this.name,\r\n            key: this.key\r\n        }), { encoding: \"utf8\" });\r\n    }\r\n\r\n    private getProfilePath(name: string): string {\r\n        return Profile.dir + \"\\\\\" + name + \"\\\\profile\";\r\n    }\r\n}"]}