{"version":3,"file":"blockchain.js","sourceRoot":"","sources":["../src/blockchain.ts"],"names":[],"mappings":"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","sourcesContent":["var SHA256: any = require(\"crypto-js/sha256\");\r\nconst EC = require(\"elliptic\").ec;\r\nconst ec = new EC(\"secp256k1\");\r\n\r\nexport class Transaction {\r\n    \r\n    public signature: string = \"\";\r\n\r\n    constructor(public from: string, public to: string, public amount: number, public comment: string = \"\") {\r\n\r\n    }\r\n\r\n    calculateHash(): string {\r\n        return SHA256(this.from + this.to + this.amount + this.comment).toString();\r\n    }\r\n\r\n    signTransaction(signingKey: any): void {\r\n        if (signingKey.getPublic(\"hex\") !== this.from) {\r\n            throw new Error(\"You cannot sign transactions for other wallets!\");\r\n        }\r\n        const hashTx = this.calculateHash();\r\n        const sig = signingKey.sign(hashTx, \"base64\");\r\n        this.signature = sig.toDER(\"hex\");\r\n    }\r\n\r\n    isValid(): boolean {\r\n        if (this.from === \"\") {\r\n            return true;\r\n        }\r\n\r\n        if (!this.signature || this.signature.length == 0) {\r\n            return false;\r\n        }\r\n\r\n        const publicKey = ec.keyFromPublic(this.from, \"hex\");\r\n        return publicKey.verify(this.calculateHash(), this.signature);\r\n    }\r\n}\r\n\r\nclass Block {\r\n\r\n    public hash: string;\r\n    public timestamp: number;\r\n    public previousHash: string;\r\n    private nonce: number;\r\n\r\n    constructor(public transactions: Transaction[]) {\r\n        this.timestamp = -1;\r\n        this.previousHash = \"\";\r\n        this.hash = \"\";\r\n        this.nonce = 0;\r\n    }\r\n\r\n    public calculateHash(): string {\r\n        return SHA256(this.previousHash + this.timestamp + JSON.stringify(this.transactions) + this.nonce).toString();\r\n    }\r\n\r\n    public mineBlock(difficulty: number): void {\r\n        const target = Array(difficulty + 1).join(\"0\");\r\n        this.nonce = 0;\r\n        while (this.hash.substring(0, difficulty) !== target) {\r\n            this.nonce++;\r\n            this.hash = this.calculateHash();\r\n        }\r\n    }\r\n\r\n    hasValidTransactions(): boolean {\r\n        for (const tx of this.transactions) {\r\n            if (tx.isValid() === false) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\nexport class BlockChain {\r\n\r\n    pendingTransactions: Transaction[];\r\n    private chain: Block[];\r\n    private difficulty = 2;\r\n    private miningReward = 100;\r\n\r\n    constructor() {\r\n        this.chain = [this.createGenesisBlock()];\r\n        this.pendingTransactions = [];\r\n        this.createGenesisBlock();\r\n    }\r\n\r\n    private createGenesisBlock(): Block {\r\n        const block = new Block([new Transaction(\"\", \"\", 0, \"Genesis block\")]);\r\n        block.timestamp = new Date().getTime();\r\n        block.hash = block.calculateHash();\r\n        return block;\r\n    }\r\n\r\n    private getLatestBlock(): Block {\r\n        return this.chain[this.chain.length - 1];\r\n    }\r\n\r\n    minePendingTransactions(rewardAddress: string) {\r\n        //add reward transaction\r\n        this.pendingTransactions.push(new Transaction(\"\", rewardAddress, this.miningReward, \"Block succesfully mined\"));\r\n\r\n        const block = new Block(this.pendingTransactions);\r\n        block.timestamp = new Date().getTime();\r\n        block.previousHash = this.getLatestBlock().hash;\r\n        block.mineBlock(this.difficulty);\r\n\r\n        this.chain.push(block);\r\n        console.log(\"Block succesfully mined\");\r\n\r\n        this.pendingTransactions = [];\r\n\r\n    }\r\n\r\n    addTransaction(tx: Transaction) {\r\n        if (!tx.from || !tx.to) {\r\n            throw new Error(\"Transaction should have both from and to Addresses!\");\r\n        }\r\n\r\n        if (tx.isValid() !== true) {\r\n            throw new Error(\"Cannot add invalid transaction to chain!\");\r\n        }\r\n\r\n        this.pendingTransactions.push(tx);\r\n    }\r\n\r\n    getBalanceOfAddress(addr: string): number {\r\n        let balance = 0;\r\n\r\n        for (const block of this.chain) {\r\n            for (const trans of block.transactions) {\r\n                if (trans.from === addr) {\r\n                    balance -= trans.amount;\r\n                } else if (trans.to === addr) {\r\n                    balance += trans.amount;\r\n                }\r\n            }\r\n        }\r\n        return balance;\r\n    }\r\n\r\n    isChainValid(): boolean {\r\n        for (let i = 1; i < this.chain.length; i++) {\r\n            const currentBlock = this.chain[i];\r\n            const prevBlock = this.chain[i -1];\r\n\r\n            if (currentBlock.hasValidTransactions() !== true) {\r\n                return false;\r\n            }\r\n\r\n            if (currentBlock.calculateHash() != currentBlock.hash) {\r\n                return false;\r\n            }\r\n\r\n            if (currentBlock.previousHash != prevBlock.hash) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n"]}