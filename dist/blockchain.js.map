{"version":3,"file":"blockchain.js","sourceRoot":"","sources":["../src/blockchain.ts"],"names":[],"mappings":"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","sourcesContent":["var SHA256: any = require(\"crypto-js/sha256\");\r\nconst EC = require(\"elliptic\").ec;\r\nconst ec = new EC(\"secp256k1\");\r\n\r\nexport class Transaction {\r\n    \r\n    public signature: string = \"\";\r\n    public timestamp: number = 0;\r\n\r\n    constructor(public from: string, public to: string, public amount: number, public comment: string = \"\") {\r\n        this.timestamp = new Date().getTime();\r\n    }\r\n\r\n    calculateHash(): string {\r\n        return SHA256(this.from + this.to + this.amount + this.comment).toString();\r\n    }\r\n\r\n    signTransaction(signingKey: any): void {\r\n        if (signingKey.getPublic(\"hex\") !== this.from) {\r\n            throw new Error(\"You cannot sign transactions for other wallets!\");\r\n        }\r\n        const hashTx = this.calculateHash();\r\n        const sig = signingKey.sign(hashTx, \"base64\");\r\n        this.signature = sig.toDER(\"hex\");\r\n    }\r\n\r\n    isValid(): boolean {\r\n        if (this.from === \"\") {\r\n            return true;\r\n        }\r\n\r\n        if (!this.signature || this.signature.length == 0) {\r\n            return false;\r\n        }\r\n\r\n        const publicKey = ec.keyFromPublic(this.from, \"hex\");\r\n        return publicKey.verify(this.calculateHash(), this.signature);\r\n    }\r\n}\r\n\r\nclass Block {\r\n\r\n    public hash: string;\r\n    public timestamp: number;\r\n    public previousHash: string;\r\n    private nonce: number;\r\n\r\n    constructor(public transactions: Transaction[]) {\r\n        this.timestamp = -1;\r\n        this.previousHash = \"\";\r\n        this.hash = \"\";\r\n        this.nonce = 0;\r\n    }\r\n\r\n    public calculateHash(): string {\r\n        return SHA256(this.previousHash + this.timestamp + JSON.stringify(this.transactions) + this.nonce).toString();\r\n    }\r\n\r\n    public mineBlock(difficulty: number): void {\r\n        const target = Array(difficulty + 1).join(\"0\");\r\n        this.nonce = 0;\r\n        while (this.hash.substring(0, difficulty) !== target) {\r\n            this.nonce++;\r\n            this.hash = this.calculateHash();\r\n        }\r\n    }\r\n\r\n    hasValidTransactions(): boolean {\r\n        for (const tx of this.transactions) {\r\n            if (tx.isValid() === false) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\nexport class BlockChain {\r\n    pendingTransactions: Transaction[];\r\n    private chain: Block[];\r\n    private difficulty = 2;\r\n    private miningReward = 100;\r\n\r\n    constructor() {\r\n        this.chain = [this.createGenesisBlock()];\r\n        this.pendingTransactions = [];\r\n        this.createGenesisBlock();\r\n    }\r\n\r\n    private createGenesisBlock(): Block {\r\n        const block = new Block([new Transaction(\"\", \"\", 0, \"Genesis block\")]);\r\n        block.timestamp = new Date().getTime();\r\n        block.hash = block.calculateHash();\r\n        return block;\r\n    }\r\n\r\n    private getLatestBlock(): Block {\r\n        return this.chain[this.chain.length - 1];\r\n    }\r\n\r\n    hasTransaction(signature: string, blockLookBack: number): any {\r\n        if (this.pendingTransactions.find(t => t.signature == signature) != null) {\r\n            return true;\r\n        }\r\n\r\n        for (let i = this.chain.length - 1; i >= 0 && i > this.chain.length - blockLookBack; i--) {\r\n            const block = this.chain[i];\r\n            if (block.transactions.find(t => t.signature == signature) != null) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    minePendingTransactions(rewardAddress: string) {\r\n        //add reward transaction\r\n        this.pendingTransactions.push(new Transaction(\"\", rewardAddress, this.miningReward, \"Block succesfully mined\"));\r\n\r\n        const block = new Block(this.pendingTransactions);\r\n        block.timestamp = new Date().getTime();\r\n        block.previousHash = this.getLatestBlock().hash;\r\n        block.mineBlock(this.difficulty);\r\n\r\n        this.chain.push(block);\r\n        console.log(\"Block succesfully mined\");\r\n\r\n        this.pendingTransactions = [];\r\n    }\r\n\r\n    addTransaction(tx: Transaction) {\r\n        if (!tx.from || !tx.to) {\r\n            throw new Error(\"Transaction should have both from and to Addresses!\");\r\n        }\r\n\r\n        if (tx.isValid() !== true) {\r\n            throw new Error(\"Cannot add invalid transaction to chain!\");\r\n        }\r\n\r\n        this.pendingTransactions.push(tx);\r\n    }\r\n\r\n    getBalanceOfAddress(addr: string): number {\r\n        let balance = 0;\r\n\r\n        for (const block of this.chain) {\r\n            for (const trans of block.transactions) {\r\n                if (trans.from === addr) {\r\n                    balance -= trans.amount;\r\n                } else if (trans.to === addr) {\r\n                    balance += trans.amount;\r\n                }\r\n            }\r\n        }\r\n\r\n        return balance;\r\n    }\r\n\r\n    isChainValid(): boolean {\r\n        for (let i = 1; i < this.chain.length; i++) {\r\n            const currentBlock = this.chain[i];\r\n            const prevBlock = this.chain[i -1];\r\n\r\n            if (currentBlock.hasValidTransactions() !== true) {\r\n                return false;\r\n            }\r\n\r\n            if (currentBlock.calculateHash() != currentBlock.hash) {\r\n                return false;\r\n            }\r\n\r\n            if (currentBlock.previousHash != prevBlock.hash) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n"]}